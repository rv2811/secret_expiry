name: Terraform Workflow

on:
  workflow_call:
    inputs:
      branch:
        required: false
        default: main
        type: string
      environment:
        required: true
        type: string
      infra:
        required: true
        type: string
      ARM_CLIENT_ID:
        required: true
        type: string
      ARM_SUBSCRIPTION_ID:
        required: true
        type: string
      ARM_TENANT_ID:
        required: true
        type: string

permissions:
  contents: read

# Environment variables for Azure authentication with the Terraform provider.
env:
  ARM_RESOURCE_PROVIDER_REGISTRATIONS: all
  TF_IN_AUTOMATION: true

jobs:
  secrets-read:
    runs-on: [self-hosted, veis, terraform]
    defaults:
      run:
        shell: bash

    steps:
    - name: test
      run: printenv

  terraform-lint:
    needs: secrets-read
    name: 'Terraform Lint'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checks out the specified branch from the repository.
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}

      # TFLint - Terraform Check
      - uses: actions/cache@v4
        name: Cache plugin dir
        with:
          path: ~/.tflint.d/plugins
          key: ${{ matrix.os }}-tflint-${{ hashFiles('.tflint.hcl') }}

      - uses: terraform-linters/setup-tflint@v4
        name: Setup TFLint
        with:
          github_token: ${{ secrets.CI_GITHUB_TOKEN }}
          
      # Install plugins
      - name: Init TFLint
        run: tflint --init
        working-directory: ${{ inputs.environment }}
        
      # Run tflint command in each directory recursively # use --force if you want to continue with workflow although errors are there
      - name: Run TFLint
        run: tflint -f compact
        working-directory: ${{ inputs.environment }}
        continue-on-error: true
    
  tfsec-checks:
    name: 'Terraform Security checks'
    needs: terraform-lint
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-latest
    
    steps:
    # Checkout Repository
    - name : Check out Git Repository
      uses: actions/checkout@v4
    
    # Tfsec - Security scanner for  Terraform code
    - name: Run Tfsec
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        working_directory: ${{ inputs.environment }}
        soft_fail: true

  checkov-scan:
    name: 'Run Checkov Scan'
    needs: tfsec-checks
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-latest
    
    steps:
    # Checkout Repository
    - name : Check out Git Repository
      uses: actions/checkout@v4

    # Runs a security scan on the Terraform code using Checkov.
    - name: Run Checkov action
      id: checkov
      uses: bridgecrewio/checkov-action@master
      with: 
        framework: terraform
      continue-on-error: true

    # # Uploads the SARIF file generated by Checkov for security analysis.
    # - name: Upload SARIF file
    #   if: success() || failure() # Uploads the SARIF file regardless of success or failure.
    #   uses: github/codeql-action/upload-sarif@v3
    #   with:
    #     sarif_file: results.sarif
    #     category: checkov

  terraform-plan:
    needs: checkov-scan
    name: 'Terraform Plan'
    runs-on: [self-hosted, veis, terraform]
  
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: AZ CLI Setup
      run:  |
       
        az login --service-principal -u ${{ inputs.ARM_CLIENT_ID }} -p=${{ secrets.ARM_CLIENT_SECRET }} --tenant ${{ inputs.ARM_TENANT_ID }}
          az account set -s ${{ inputs.ARM_SUBSCRIPTION_ID }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -input=false -backend-config="access_key=${{ secrets.ARM_ACCESS_KEY }}"
      working-directory: ${{ inputs.environment }}

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check
      working-directory: ${{ inputs.environment }}
      continue-on-error: true

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Validate
      run: terraform validate 
      working-directory: ${{ inputs.environment }}
    
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false -out="${{ inputs.infra }}-${{ inputs.environment }}.tfplan"
      working-directory: ${{ inputs.environment }}
    
    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v4
      with:
        name: "tf-${{ inputs.infra }}-${{ inputs.environment }}"
        path: ${{ inputs.environment }}/*.tfplan

  terraform-apply:
    name: 'Terraform Apply'
    runs-on: [self-hosted, veis, terraform]     
    needs: terraform-plan 
    environment:
      name: ${{ inputs.environment }}
    steps:
      # Checks out the specified branch from the repository.
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}

      - name: AZ CLI Setup
        run:  |
         
          az login --service-principal -u ${{ inputs.ARM_CLIENT_ID }} -p=${{ secrets.ARM_CLIENT_SECRET }} --tenant ${{ inputs.ARM_TENANT_ID }}
          az account set -s ${{ inputs.ARM_SUBSCRIPTION_ID }}

      # Initializes the Terraform working directory.
      - name: Initialize Terraform
        run: terraform init -input=false -backend-config="access_key=${{ secrets.ARM_ACCESS_KEY }}"
        working-directory: ${{ inputs.environment }}

      # Downloads the Terraform plan artifact for use in subsequent steps.
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: "tf-${{ inputs.infra }}-${{ inputs.environment }}"
          path: ${{ inputs.environment }}

      # Applies the Terraform plan to make infrastructure changes.
      # This step executes the infrastructure changes defined in the plan file.
      - name: Apply Terraform
        run: terraform apply -auto-approve -input=false "${{ inputs.infra }}-${{ inputs.environment }}.tfplan"
        working-directory: ${{ inputs.environment }}
